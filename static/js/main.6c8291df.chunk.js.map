{"version":3,"sources":["Component/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","timerId","state","time","Date","toUTCString","slice","this","window","setInterval","setState","console","info","prevProps","name","props","debug","clearInterval","className","Component","getRandomName","value","now","toString","App","hasClock","clockName","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"qMAEaA,EAAb,4MACEC,aADF,IAGEC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,cAAcC,OAAO,IAAK,IAJ/C,uDAOE,WAAqB,IAAD,OAClBC,KAAKN,QAAUO,OAAOC,aAAY,WAChC,EAAKC,SAAS,CAAEP,MAAM,IAAIC,MAAOC,cAAcC,OAAO,IAAK,KAE3DK,QAAQC,KAAK,EAAKV,MAAMC,QACvB,OAZP,gCAeE,SAAmBU,GACbA,EAAUC,OAASP,KAAKQ,MAAMD,MAEhCH,QAAQK,MAAR,uBAA8BH,EAAUC,KAAxC,eAAmDP,KAAKQ,MAAMD,SAlBpE,kCAsBE,WACEN,OAAOS,cAAcV,KAAKN,WAvB9B,oBA0BE,WACE,IAAQE,EAASI,KAAKL,MAAdC,KACAW,EAASP,KAAKQ,MAAdD,KAER,OACE,sBAAKI,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SAAiCJ,IAChC,YACD,sBAAMI,UAAU,cAAhB,SAA+Bf,WAlCvC,GAA2BgB,a,MCO3B,SAASC,IACP,IAAMC,EAAQjB,KAAKkB,MAAMC,WAAWjB,OAAO,GAE3C,MAAM,SAAN,OAAgBe,GAGX,IAAMG,EAAb,4MACEtB,MAAQ,CACNuB,UAAU,EACVC,UAAW,WAHf,uDAME,WAA2B,IAAD,OACxBC,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACN,EAAKpB,SAAS,CAAEe,UAAU,OAG5BE,SAASC,iBAAiB,SAAS,WACjC,EAAKlB,SAAS,CAAEe,UAAU,OAG5BjB,OAAOC,aAAY,WACjB,EAAKC,SAAS,CAAEgB,UAAWN,QAC1B,QAlBP,oBAqBE,WACE,MAAgCb,KAAKL,MAA7BuB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,OACE,sBAAKR,UAAU,MAAf,UACE,6CAECO,GAAY,cAAC,EAAD,CAAOX,KAAMY,WA5BlC,GAAyBP,aCZzBY,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.6c8291df.chunk.js","sourcesContent":["import { Component } from 'react';\n\nexport class Clock extends Component<{ name: string }, { time: string }> {\n  timerId: number | undefined;\n\n  state = {\n    time: new Date().toUTCString().slice(-12, -4),\n  };\n\n  componentDidMount() {\n    this.timerId = window.setInterval(() => {\n      this.setState({ time: new Date().toUTCString().slice(-12, -4) });\n      // eslint-disable-next-line no-console\n      console.info(this.state.time);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: { name: string }) {\n    if (prevProps.name !== this.props.name) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.timerId);\n  }\n\n  render() {\n    const { time } = this.state;\n    const { name } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">{name}</strong>\n        {' time is '}\n        <span className=\"Clock__time\">{time}</span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport { Clock } from './Component/Clock';\nimport './App.scss';\n\ntype State = {\n  hasClock: boolean;\n  clockName: string;\n};\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport class App extends Component<{}, State> {\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n\n    window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n  }\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && <Clock name={clockName} />}\n\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}